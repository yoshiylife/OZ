/*
 * Copyright(c) 1994-1997 情報処理振興事業協会（ＩＰＡ）
 *
 * ＩＰＡは全ての権利を保留します。
 * 本ソフトウェア及びその関連ドキュメンテーションは情報処理振興事業協会（Ｉ
 * ＰＡ）が実施した「開放型基盤ソフトウェア研究開発評価事業」の成果です。
 *
 * 本ソフトウェア及びその関連ドキュメンテーションを利用、複製、変更、配布す
 * る場合は、配布パッケージのファイル「COPYRIGHT.JIS」に記載される使用条件
 * に従って下さい。
 */

			  このディレクトリについて


目次:

1. ディレクトリの内容
2. ブートクラスの変更



1. ディレクトリの内容

このディレクトリには、“ブートクラス”のソースファイルが収められています。ブー
トクラスとは、 OZ++ システム上での OZ++ 言語のコンパイルに必要な環境を構成す
るクラスのことです。ブートクラス以外のクラスは、 OZ++ システムに附属している
開発環境によってコンパイルすれば利用できますが、ブートクラスだけは、あらかじ
め用意されている必要があります。

　このディレクトリには以下のディレクトリが含まれています。

        src/boot-class/Imakefile    … Makefile のモト
                       bin/         … make で使われるプログラム群
                       etc/         … クラス名とクラス ID の対応表
                       include/     … ../../include への symbolic link
                       lib/         … ブートクラスのバイナリが作られる
                       src/         … ブートクラスのソース

ディレクトリ src/boot-class にて make all をすることで、 lib の下にバイナリが
作られ、 make install することで、 $OZROOT/lib/boot-class の下にコピーされま
す。


2. ブートクラスの変更

OZ++ システムでは、クラス ID によってクラスの同一性が判定されます。ブートクラ
スは、すべての OZ++ システムで同じものが使われるという設計ですので、原則とし
て、同じ ID で同じ内容のクラスが含まれていなければなりません。したがって、ブー
トクラスを修正するというのは、エグゼキュータやニュクリアスを修正するのとほと
んど変わらず、通常は起こりません。しかし、以下のような状況はあり得るでしょう。

  (a) ブートクラスを改良するパッチを手に入れ、適用する。
    同じクラスでなくてはならないと言っても、現実には、同じインタフェースと同
    じメモリイメージを持ち、同じく機能するクラスであれば動作します。これを利
    用した、バグフィクスや性能向上のためのパッチは配布される可能性があります。

  (b) サイト内のすべての OZ++ システムのブートクラスを変更する。
    他のサイトとは通信しないのであれば、すべての OZ++ システムのブートクラス
    を取り替えてしまえば、動きます。

このような場合には、以下の手順にしたがって作業することで、ブートクラスを変更
できます。

  2.1 変更されたブートクラスを用意する

ソースの改変、コンパイル、テストが必要です。

  (a) 作業用の OZROOT を作成する。
    新たな OZROOT を install して下さい。

  (b) ソースの取り出し
    ブートクラスのソースは、 lib/boot-class の下の、クラス ID と同じ名前のディ
    レクトリの下に、 private.oz という名前で格納されています。このファイルを、
    適切な名前のファイルにコピーして取り出します (ディレクトリ ozsrc には、こ
    のように名前をつけて取り出したファイルが一式含まれています)。

  (c) ソースの改変
    取り出したソースを改変します。パッチの場合は、パッチの指示にしたがって変
    更して下さい。

  (d) コンパイル
    ブートクラスのコンパイルには、 cfed を直接使用するのが良いようです。この
    ファイルの最後で、 cfed の簡単な使い方を説明します。

  (e) テスト
    コンパイルが終了したら、 newimage して起動してみて下さい。その際、古いコー
    ドで動作しているエグゼキュータとは通信できませんので、他のエグゼキュータ
    は停止させるか、または、 ncl の起動時オプションで、他のステーション上のエ
    グゼキュータとは通信できないようにします。この具体的な方法は、 ncl のドキュ
    メントを参照して下さい。

  2.2 変更したブートクラスを公開する

手元の OZ++ システムにあるブートクラスのソースファイルを、 OZ++ のリリースに
コピーします。 make World されたリリースに対して、以下の操作を行うと、リリー
スの中のブートクラスを変更できます。

  (a) cd src/boot-class
  (b) make change


[付録]

A. cfed の使い方

  A.1 cfed とは

cfed とは、コンパイルに必要な各種の操作を、コマンドライン形式で利用できるよう
に工夫された C プログラムです。ブートクラスにも、通常のクラスにも用いることが
できますが、ここではブートクラスに対して使用する方法についてだけ述べます。

  A.2 cfed の起動方法

cfed は各種のオプションを持っていますが、ブートクラスに対して用いる場合は、以
下のようにして起動します。

        cfed [-p]

オプション -p を指定すると、プロンプトを表示します。

cfed はスクールファイルを必要としますが、この形式で起動されると、ファイル 
$OZROOT/etc/boot-school をスクールファイルとして使います。 OZ++ システムが正
常にインストールされていれば、ここにはブートクラスのスクールが格納されている
はずです。

  A.3 cfed の各種コマンド

cfed は、主に次のような機能を持っています。

  ・クラス ID の検索
  ・コンパイル
  ・コンフィギュレーション
  ・ジェネリッククラスの生成

    A.3.1 クラス ID の検索

クラス ID は sb コマンドによって検索できます。これは、主に以下のように用いま
す。

        CFE> sb <class-name>
または、
        CFE> sb <class-ID>

<...> という部分は、適切な文字列で書き換えるべき部分であることを示しています 
(この規則は、以下の各コマンドでも同じです)。最初の例では class-name のクラス
のクラス ID が表示され、次の例では class-ID のクラスのクラス名が表示されます。 
class-name の中に ' ' (空白) が含まれる場合 (ジェネリッククラスの場合に生じる) 
は、両端を ' (apostrophe) で括って下さい。

        CFE> sb -h

とやると、その他の使い方が表示されます。

    A.3.2 コンパイル

OZ++ ソースファイルを、 compile コマンドによってコンパイルできます。これは、
主に以下のように用います。

        CFE> compile <file-name> <part> again

OZ++ のソースファイルである file-name をコンパイルします。 OZ++ のコンパイル
は、パートごとに行われますが、どのパートをコンパイルするのかを part に指定し
ます。 part には、 public, protected, private, all などを指定できます。 again 
というのは、既にそのパートがコンパイル済みのときでも、同じ ID でもう一度コン
パイルしなさいという意味です。ブートクラスは、 (誰かが again つきのコンパイル
に失敗したのでない限り) 既にコンパイルされているので、この指定が必要です。

    A.3.3 コンフィギュレーション

クラスは、 config コマンドでコンフィギュアできます。これは、主に以下のように
用います。

        CFE> config <class-name> again

class-name のクラスをコンフィギュアします。 class-name の中に ' ' (空白) が含
まれる場合 (ジェネリッククラスの場合に生じる) は、両端を ' (apostrophe) で括っ
て下さい。 again というのは、既にそのクラスがコンフィギュアされていても、同じ 
ID でもう一度コンフィギュアしなさいという意味です。ブートクラスは既にコンフィ
ギュアされているので、この指定が必要です。

    A.3.4 リアルジェネリッククラスの生成

もしもフォーマルジェネリッククラスを変更したのであれば、そこから生成されたリ
アルジェネリッククラスも再生成する必要があります。これは generate コマンドで
できます。主に以下のように用います。

        CFE> generate <class-name> again

class-name には、生成したいリアルジェネリッククラスのクラス名を指定します。 
class-name の中に ' ' (空白) が含まれる場合 (ジェネリッククラスの場合に生じる) 
は、両端を ' (apostrophe) で括って下さい。 again というのは、既にそのクラスが
生成されていても、同じ ID でもう一度生成し直しなさいという意味です。ブートク
ラスは、既に一度生成されているので、この指定が必要です。
