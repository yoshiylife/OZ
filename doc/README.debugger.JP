/*
 * Copyright(c) 1994-1997 情報処理振興事業協会（ＩＰＡ）
 *
 * ＩＰＡは全ての権利を保留します。
 * 本ソフトウェア及びその関連ドキュメンテーションは情報処理振興事業協会（Ｉ

  ＰＡ）が実施した「開放型基盤ソフトウェア研究開発評価事業」の成果です。
 *
 * 本ソフトウェア及びその関連ドキュメンテーションを利用、複製、変更、配布す

  る場合は、配布パッケージのファイル「COPYRIGHT.JIS」に記載される使用条
件
 * に従って下さい。
 */

OZ++ デバッガ	Version 0.00


０.はじめに

今回リリースされるデバッガの機能には、次の４つがある。
    1).デバッグフラグを設定したラウンチ
    2).プロセスとグローバルオブジェクトのインスペクト
    3).デバッグメッセージの捕捉
    4).例外メッセージの捕捉
1).は、デバッグフラグを設定したプロセスの起動を行う。
2).は、指定したグローバルオブジェクトやプロセスをインスペクトし、オブジェクトの
デバッグフラグを操作する。
3).は debug文により出力されたデバッグメッセージを記録する。
4).は、例外発生のメッセージを捕捉し、プロセスのインスペクタを起動する。
現在、インスペクタには、単独に動作するものと他のツールから呼び出されるものが
あり、ユーザインタフェースが全く異なる。しかし、将来的にはこれらの機能を統合
する予定である。


１.起動と終了

　エグゼキュータを起動すると出てくるランチャから DebuggerFrontendLaunchable
というクラス名でオブジェクトを生成し、起動する。このランチャからのオブジェクト
の生成と起動を行う方法についてはランチャの README を参照して欲しい。
デバッガフロントエンドが起動すると、先に述べた機能を実行するための画面
（ＧＵＩ）が表示される。終了する場合は、画面の Debugger メニューで、Quit
を選ぶ。但し、既に起動されている機能は各々終了させる必要がある。


1).デバッグフラグを設定したラウンチ

デバッグフラグは、debug 文を実行するかどうかのフラグで、public, protected,
private, recrod の各メソッドについてオブジェクトのパート毎に設定することが
できる。デバッグフラグは、プロセスにもあり、プロセスのフォーク時に設定する
ことができる。このデバッグフラグを設定したプロセスのフォークを行うのが、
デバッグ用ランチャである。（注意、ここで述べているプロセスとは、UNIX の
プロセスでは　なく、OZ++ のプロセスのことである）
通常は、この操作を行う前に、後述のデバッグメッセージの捕捉の
準備を行う。

●デバッグ用ランチャの起動と終了

デバッグ用ランチャは、Debugger メニューで Launcher を選ぶと起動される。
プロジェクト管理やインスタンス管理の機能を持たないが、デバッグフラグを
設定したプロセスのフォークを行うことができる。ただし、クラス Launchable を
継承している必要がある。デバッグ用ランチャを終了するには、Close ボタンを押す。

●プログラムの起動（ランチ）の手順

a) Class Name に起動したいクラスの名前、あるいは、パブリックのクラスＩＤ
を入力する。但し、Launchable を継承している必要がある。
この制限事項は、エグエキュータ起動時のランチャと同様である。プログラムの
起動は、Launchableクラスで取り決められた方法によって行われる。

b) デバッグフラグを設定する。
OZ++ 言語仕様にもとづいて記述されたデバッグ文を実行対象に
する設定を行う。次の項目を複数選択することができる。
	Public
	Protected
	Private
	Record
これらは、メソッドのアクセス制御に対応しており、選択されたアクセス制御権を
もつメソッド中のデバッグ文が実行の対象となる。

c) Initialize ボタンを押す。
このボタンを押すとオブジェクトの生成とメソッド Initialize() の呼出しが
行われる。この一連の処理が成功すると、先程押したボタンが Launch に変わる。
Clear ボタンが押されると、生成したオブジェクトやプロセスを放置したまま、
新たにクラスに対する操作を行うことができる。

d) デバッグフラグを設定する。

e) Launch ボタンを押す。
Launch ボタンを押すと、先の生成されたオブジェクトの メソッド Launch() を
呼び出す。Clear ボタンが押されると、生成したオブジェクトやプロセスを
放置したまま、新たなクラスに対する操作を行うことができる。

f) 必要があれば、Kill ボタンを押す。
Kill ボタンを押すと、OZ++ 言語仕様の kill がメソッド Launch() を実行している
プロセスに対して実行される。Kill ボタンは、UNI*のSIGKILLのような動作しない。
つまり、OZ++ 言語仕様に従ってプログラムを作成しないかぎり、無限ループを
止めることはできない。



2).プロセスとグローバルオブジェクトのインスペクト(Inspector)

Debugger メニューで Procss を選択するとプロセスの一覧が表示される。
あるいは、Debugger メニューで Object を選ぶとグローバルオブエジェクトの一覧が
表示される。この各々の一覧からインスペクトする項目を選択（ダブルクリック）
すると、各々のインスペクト画面が表示される。
プロセスをインスペクトすると、そのプロセスは一時停止の状態になる。
グローバルオブジェクトをインスペクトすると、グローバルオブジェクトは
一時停止の状態なる。これは、そのグローバルオブジェクト上の全てのスレッドが
一時停止の状態になることを意味しているので、注意が必要である。
いづれも場合も、インスペクトの画面を Close すると、自動的に再開される。


3).デバッグメッセージの捕捉

Debugger メニューで Message を選択するとデバッグメッセージを捕捉し、表示する
画面が現われる。この画面には、debug 文の実行ににより作成されたデバッグ
メッセージが、その宛先毎にに表示される。宛先が default である場合は、
「Default」の画面にメッセージを表示する。宛先がプロセス、あるいは、
グローバルオブジェクトである場合は、プロセス、グローバルオブジェクト毎に
新しい画面にメッセージを表示する。この機能は、１つのエグゼキュータに１つ
のみ起動することができる。


4).例外メッセージの捕捉

Debuger メニューで Exception を選択すると例外メッセージを捕捉し、表示する
画面が現われる。この画面には、当該エグゼキュータからフォークされたプロセス
で発生した例外も報告される。例外メッセージの捕捉の画面の Capture メニュー
で選択された種類 の例外が発生すると、直ちにプロセスのインスペクトを開始する。
選択できる例外の種類は、次の４つである。
	Not caught	プログラム上で捕捉されない例外
	caught		プログラム上で捕捉される例外
	re-raise	例外を伝播するための例外
	DoubleFault	例外処理中に発生した例外
例外のパラメータがオブジェクトであれば、オブジェクトのインスペクトも
開始する。プロセスのインスペクトを終了させると、例外処理が続行される。
この機能は、１つのエグゼキュータに１つのみ起動することができる。

-----終わり。
