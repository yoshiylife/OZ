/*
 * Copyright(c) 1994-1997 情報処理振興事業協会（ＩＰＡ）
 *
 * ＩＰＡは全ての権利を保留します。
 * 本ソフトウェア及びその関連ドキュメンテーションは情報処理振興事業協会（Ｉ
 * ＰＡ）が実施した「開放型基盤ソフトウェア研究開発評価事業」の成果です。
 *
 * 本ソフトウェア及びその関連ドキュメンテーションを利用、複製、変更、配布す
 * る場合は、配布パッケージのファイル「COPYRIGHT.JIS」に記載される使用条件
 * に従って下さい。
 */

                       OZ++ システム, 第 1 版, リリース 5

                             newimage 利用マニュアル

                       開放型基盤ソフトウェアつくば研究室


目次

1. はじめに
2. オブジェクトイメージ定義ファイル
3. newimage の使い方
 3.1 newimage の起動
 3.2 設定方法の選択
 3.3 クラスオブジェクトの設定
 3.4 ネームディレクトリの設定
 3.5 ランチャの設定
 3.6 カタログの設定
 3.7 オブジェクトマネージャの設定
4. 起動時オプション
5. 標準の設定
 5.1 サイトマスター
 5.2 ステーションマスター
 5.3 クラスオブジェクトつきスレーブ
 5.4 クラスオブジェクトなしスレーブ
 5.5 スタンドアローン
6. oic のエラメッセージ
7. newimage の中断


1. はじめに

この文書は、 OZ++ の分散オブジェクト管理システムのオブジェクトイメージを作成
するツール newimage の利用方法を説明するものです。
　OZ++ システムでは、エグゼキュータ上でオブジェクトを動作させることによって計
算が進みます。ユーザオブジェクトを実行するためには分散オブジェクト管理システ
ムのオブジェクト (以下、管理オブジェクトと言う) が必要で、エグゼキュータを生
成する際にはこれらのオブジェクトを作成する必要があります。これを行うツールが、
以下で述べる newimage です。
　以下では newimage の使い方を述べますが、サイトのどこにどのようなオブジェク
トを配置すべきかに関しては、別の資料 README.site.JP に記述されていますので、
そちらを御覧下さい。

2. オブジェクトイメージ定義ファイル

OZ++ では、オブジェクトに大きく分けて二種類あります。ひとつは、グローバルに有
効なオブジェクト ID を持ち、他のエグゼキュータからでもメソッド起動され得る、
グローバルオブジェクトです。グローバルオブジェクトでないオブジェクトはローカ
ルオブジェクトと呼ばれます。ローカルオブジェクトはどれかのグローバルオブジェ
クトに従属して存在しています。他のグローバルオブジェクトに属しているローカル
オブジェクトに直接アクセスすることはできません。

各エグゼキュータ上では一般に複数のグローバルオブジェクトが、それに従属してい
るローカルオブジェクトとともに動作しています。グローバルオブジェクトは、永続
化することができます。永続化されているグローバルオブジェクトを `永続オブジェ
クト' と呼びます。永続オブジェクトは、そのグローバルオブジェクトに従属するロー
カルオブジェクトとともにファイルに格納されます。ファイルに格納されるオブジェ
クトの表現を `オブジェクトイメージ' と呼び、オブジェクトイメージを納めたファ
イルを `オブジェクトイメージファイル' と呼びます。オブジェクトイメージファイ
ルはディレクトリ `\$OZROOT/images' の下に、下記のようなディレクトリ構造で保存
されています。

        $OZROOT/images/000101/objects/000001
                                      000002
                                      000003
                       000102/objects/000001
                                      000002
                                        :

$OZROOT/images の直下には、エグゼキュータ ID の、サイト内におけるエグゼキュー
タ番号に相当する部分を 16 進数で表現した名前のディレクトリがあります。これを
オブジェクトイメージディレクトリと呼びます。オブジェクトイメージディレクトリ
の下のディレクトリ `objects' の下には、そのエグゼキュータ上のグローバルオブジェ
クトのオブジェクトイメージファイルが格納されます。それらの名前は、そのオブジェ
クト ID の、そのエグゼキュータ上での番号を表す部分を 16 進数で表現した文字列
です。
　仮にサイト ID を 0001 とすれば、上の例では、ふたつのエグゼキュータ

        0001 000101 000000
        0001 000102 000000

があり、それぞれオブジェクト

        0001 000101 000001
        0001 000101 000002
        0001 000101 000003
と
        0001 000102 000001
        0001 000102 000002

を保持していることが表現されています。
　newimage を適切に使用することにより、オブジェクトイメージディレクトリの実体
を、 $OZROOT/images の下ではない別の場所に作って、シンボリックリンクで結ぶこ
とが可能です。この方法については、 4 節を参照して下さい。

3. newimage の使い方

この節では、 newimage の起動操作や各種の設定操作を、順序にしたがって説明しま
す。

 3.1 newimage の起動

newimage はオブジェクトイメージを新規に作成する対話的なツールです。起動する
には、 nfe から、

        nfe> newimage

とタイプします。ここで指定できるオプションや引数については、 4 節を参照して下
さい。
　newimage は、以下の順に対話的に設定を確認していきます。

    ・クラスオブジェクトの設定
    ・ネームディレクトリの設定
    ・ランチャの設定
    ・カタログの設定
    ・オブジェクトマネージャの設定

そして、最後にオブジェクトイメージコンパイラ (oic) を起動して、オブジェクトイ
メージファイルを作成します。
　newimage の起動直後に次のようなエラーメッセージが出力される場合があります。

        template directory ($OZROOT/lib/images-template) doesn't exist.

これは、あるべきテンプレートディレクトリが見当たらないという意味です。 
$OZROOT のところには、 OZROOT のパスが出力されます。この場合、 OZ++ システム
のインストールが正常に行われなかった可能性がありますので、システム全体を再イ
ンストールして下さい。

 3.2 設定方法の選択

newimage を起動すると、次のような画面が表示されます。

        What kind of image do you want?
            1. Site master
            2. Station master
            3. Slave with a class object
            4. Slave without a class object
            5. Stand alone
            9. Fully customized
            0. Help
        ? 

メニューの 1-5 に、標準的な設定が用意されています。これらの意味については、 
README.site.JP を参照して下さい。 9 を選択すると、すべてを個別に設定できます。 
0 はヘルプで、標準的な設定に関する説明を見ることができます。
　なお、標準的な設定についての説明は 5. 節で述べることとし、以下では 9 を選択
した場合の操作について説明します。

 3.3 クラスオブジェクトの設定

クラスオブジェクトの設定は、そのエグゼキュータに作成する場合と他のエグゼキュー
タのものを雇う場合とで異なります。

  3.3.1 そのエグゼキュータにクラスオブジェクトを作成する場合

この場合は、

        Do you need a local class object for this executor (y/n) ?

に y と答えて下さい。
すると、作成するクラスオブジェクトの種類を尋ねてきます。

        What kind of class do you need (1 .. normal, 2 .. with monitor) [1] ?

with monitor というのは、クラス配送モニタを出力するタイプのクラスオブジェクト
です。どちらでも好きな方を指定して下さい。
　続いて、そのクラスがブートクラスを管理するかどうかを尋ねてきます。

	Does it manage boot-classes (y/n) ? 

ブートクラスとは、開発環境をセットアップして自力でクラスをコンパイルして自由
に追加できるようになるまでに必要なクラスのことです (README.site.JP 参照)。
　続いて、クラスオブジェクトをネームディレクトリに登録するかどうかを尋ねてき
ます。

        Do you want to name the class object (y/n) ?

自由な名前をいくつでもつけて下さい。
　クラスオブジェクトは、コンパイラフロントエンドなどから利用したり、 3.3.2 で
述べるように他のエグゼキュータから雇われたりしますが、その際にはここでつけた
名前で参照されます。名前を忘れないようにしてください。また、複数のクラスオブ
ジェクトに同じ名前を付けることはできません。

  3.3.2 他のエグゼキュータのクラスオブジェクトを雇う

そのエグゼキュータにクラスオブジェクトを置かないことも可能です。しかし、その
エグゼキュータ上のオブジェクトが動作するためには、そのエグゼキュータにクラス
を供給するクラスオブジェクトが少なくともひとつは必要です。

        Do you need a local class object for this executor (y/n) ?

に n と答えると、クラスオブジェクトを置かないエグゼキュータを作ることができ
ます。
　この場合、外部のクラスオブジェクトをいくつ雇うか尋ねてきます。

        How many remote class objects do you employee ?

適切な数を答えて、

        What is the name (i)

(i には数字が入ります) に、雇うクラスオブジェクトの名前を入力していって下さい。
　ただし、ここで雇い入れることができるクラスオブジェクトは、そのエグゼキュー
タと同じ OZROOT を共有していなければなりません。たいていは、同じステーション
上にあるエグゼキュータでしょう。あるいは、 NFS などの機構によって、 OZROOT を
共有している場合もあるかもしれません。そうでないクラスオブジェクトを指定して
も newimage にはチェックできません。しかもそのエグゼキュータは動作しませんの
で、特に注意が必要です。

 3.4 ネームディレクトリの設定

このリリースでは、 newimage を使ってローカルなネームディレクトリを作ったりネー
ムディレクトリを複製したりという設定はできませんので、既にどこかにネームディ
レクトリがあるドメインでは、ふたつめのネームディレクトリを作っても使えません。
したがって普通は、ドメインの中心的なエグゼキュータを作成しようとしているとき
だけ、

        Do you need a local name directory (y/n) ?

に y と答えて下さい。既にネームディレクトリをどこかに持っている場合は n と答
えて下さい。

  3.4.1 ネームディレクトリを作るとき

ネームディレクトリを作る場合は以下の設定を行います。

        Do you want to preload the name directory (y/n) ?

にはどう答えても構いません。
　次に、そのネームディレクトリが管理するドメインの名前を尋ねられます。

        What domain does the name directory manage ?

何か文字列を入力して下さい。 DNS のドメイン名 (ipa.go.jp など) を使うのが、紛
れがなくてよいのではないでしょうか。

  3.4.2 ネームディレクトリを作らないとき

ネームディレクトリを作らない場合は、

        You can set an object ID as the name directory for this executor.
        Or, at the first execution of this executor, the name directory
        is searched by broadcasting.
        Do you set an object ID as the name directory (y/n) ?

と聞かれます。ドメインのネームディレクトリはブロードキャストによって自動的に
見つかりますので、どちらを答えても構いません。
　もしも y を答えたなら、続いて

        What is the object ID ?

と質問されますので、ネームディレクトリのオブジェクト ID を入力します。 
newimage で作成したネームディレクトリのオブジェクト ID は、必ず

    サイト ID (4ケタ) + エグゼキュータ番号 (6ケタ) + 000003

になっています。例えば、サイト ID 1、エグゼキュータ番号 0x101 のエグゼキュー
タのネームディレクトリのオブジェクト ID は、

        0001000101000003

です。
　さもなければ、 0000000000000000 を答えることもできます。これは n を答えるの
と同じ結果になります。すなわち、このエグゼキュータの起動時に、サイト内の全ニュ
クリアスに対して、ネームディレクトリを探すためのブロードキャスト通信が送信さ
れます。

 3.5 ランチャの設定

        Do you need a Launcher (y/n) ?

および

        Do you want to preload the launcher (y/n) ?

にはどう答えても構いません。ただし、ランチャのないエグゼキュータからはアプリ
ケーションを起動できませんので、作成してプリロードするのが普通です。

 3.6 カタログの設定

そのエグゼキュータにカタログを作成するのでしたら、

        Do you need a local catalog (y/n) ?

に y と答えて下さい。
　`:catalog' という名前で参照されるカタログは、ドメインにひとつしか作れません。
このリリースでは、 newimage を使ってカタログを分散配置したり複製したりという
設定はできませんので、既にどこかにカタログがあるドメインでは、ふたつめのカタ
ログを作っても使えません。したがって普通は、そのドメインの中心的なエグゼキュー
タにだけカタログを作れば十分です。
　カタログを作ったのなら、

        Do you want to preload the catalog (y/n) ?

には y を答えて下さい。
　そのカタログに名前をつける場合は、

        Do you want to name the school directory (y/n) ?

に y と答えます。
　ワークベンチやランチャから参照されるカタログは `:catalog' という名前のもの
ですので、普通は y を答えて `:catalog' という名前をつけます。

 3.7 オブジェクトマネージャの設定

最初にオーナ名を入力して下さい。

        Who are you [nnnn] ?

環境変数 $USER か $LOGNAME が設定されていれば、その内容が nnnn に表示されてい
るはずです。
　続いて、スタンドアローン用のオブジェクトマネージャにするかどうかを聞いてきま
す。

        Do you make a stand alone object manager (y/n) ?

スタンドアローン用のオブジェクトマネージャは、動作にネームディレクトリなどの他
の分散オブジェクト管理系のオブジェクトを必要とせず、アプリケーションのオブジェ
クトをひとつだけ生成して動作させることができます。詳細は 5.5 節で述べます。
　次の質問は、スタンドアローン用のオブジェクトマネージャを作った場合だけ表示さ
れ、そうでない場合はスキップされます。

        Do you refer a class directory of another executor (y/n) ?

スタンドアローン用のオブジェクトマネージャは、他のエグゼキュータのクラスディレ
クトリを参照して動作することができ、そうすることで、クラスオブジェクトを作った
り雇ったりしないことが可能になります。詳細は、 -r オプションの説明で述べます。

　続いて、ブート時のコンフィギュレーションテーブルに対する追加/変更があるかど
うかを質問されます。

        Do you make changes on the boot time configuration table (y/n) ?

ここで y と答えると、コンフィギュレーションファイルの所在を質問されます。

        What is the file name ?

コンフィギュレーションファイル名を入力して下さい。詳細は -a オプションの説明で
述べます。

　次に、デーモンプロセスの数を設定します。

        Do you want to change the default number of fault daemons [2/2/0/2/1/3/2] (y/n) ?

プロセスはそれなりに資源を消費するので、一般的に言って少ない方がよいです。デ
フォルトの設定でも特に問題はありません。参考までに、ここで設定可能なデーモン
プロセスの種類と、デフォルトの数、および役割を述べておきます。

・BroadcastReceiver [2]

  ブロードキャストを受信します。

・CodeFaultDaemon [2]

  エグゼキュータがあるクラスの実行可能コードを必要としたときに、必要なクラ
  スの ID をオブジェクトマネージャに伝えます。

・LayoutFaultDaemon [0]

  エグゼキュータがあるクラスのレイアウト情報を必要としたときに、必要なクラ
  スの ID をオブジェクトマネージャに伝えます。
  ただし、このリリースには Sun OS 4.1.3 用のセットしか含まれていませんので、
  実際にこのデーモンプロセスが起動されることはありません。

・ClassRequestDaemon [2]

  エグゼキュータがあるクラスの実行時クラス情報を必要としたときに、必要なク
  ラスの ID をオブジェクトマネージャに伝えます。

・ObjectFaultDaemon [1]

  まだ起動されていないグローバルオブジェクトのメソッドが起動されたときに、
  どのグローバルオブジェクトのメソッドが起動されたのかをオブジェクトマネー
  ジャに伝えます。

・ConfigurationDaemon [3]

  エグゼキュータは、インスタンスの生成の際に必ずコンフィギュレーション情報
  を必要としますが、それをオブジェクトマネージャに伝えるためのデーモンです。
  数あるデーモンプロセスの中でも最も頻繁に動作します。

・DebuggerClassRequestDaemon [2]

　デバッガがあるクラスの情報を必要としたときに、必要なクラスの ID をオブジェ
　クトマネージャに伝えます。

　最後に、

	Do you want to name the object manager (y/n) ?

と聞かれます。好きな名前をいくつでもつけて下さい。

4. 起動時オプション

newimage は、各種のオプションと、ひとつの引数を取ります。
　オプションは、以下の通りです。

    -n  このエグゼキュータに、 nfe が認識可能な名前をつけます。

    -c  このエグゼキュータにコメントを付記します。
        コメントは、 nfe の exidlist コマンドなどを実行すれば表示できます。

    -g  クラスオブジェクトを、クラス配送モニタなしに設定します。

    -d domain-name
        このエグゼキュータが属すべきドメイン名を domain-name に設定します。

    -u user-name
        このエグゼキュータのオーナ名を user-name に設定します。

    -k configuration-name
        標準のコンフィギュレーションを使用します。 configuration-name は、
        次のいずれかです。

            site-master または 1
            station-master または 2
            slave-with-class または 3
            slave-without-class または 4
            stand-alone または 5

    -o image-directory
        オブジェクトイメージディレクトリを、 $OZROOT/images/<EX-ID> ではな
        く、 image-directory/<EX-ID> に作り、 $OZROOT/images/<EX-ID> から 
        image-directory/<EX-ID> にシンボリックリンクを張ります。

    -a configuration-file-name
        オブジェクトマネージャにブート時に有効なコンフィギュレーションを教
        えるための設定ファイル (コンフィギュレーションファイル) を指定しま
        す。インスタンスを生成する際、エグゼキュータは、オブジェクトマネー
        ジャに対し、パブリックパートの ID を指定して、使用すべきコンフィギュ
        アドクラスの ID を問い合わせてきます。オブジェクトマネージャは通常
        これをクラスオブジェクトに問い合わせて解決し、エグゼキュータに回答
        します。しかし、オブジェクトマネージャは、クラスオブジェクトがいな
        い状況でも動作しなければならない場合があります。すなわち、エグゼキュー
        タのブートの際と、スタンドアローンでの動作時です。この状態でインス
        タンスを生成しなければならない場合、オブジェクトマネージャは、内部
        のブートコンフィギュレーションテーブルの設定にしたがってコンフィギュ
        アドクラス ID を回答します。通常は、ブートコンフィギュレーションは、
        オブジェクトマネージャとクラスオブジェクトのブートに必要なクラスに
        ついて、インストール時にコンパイルされたバージョンが利用されるよう
        に設定されています。 -a オプションは、ブートコンフィギュレーション
        テーブルの内容を変更したり、追加したりするために用います。コンフィ
        ギュレーションファイルの書式は以下の通りです。

            <file> ::= <record>*
            <record> ::= CLASS-NAME <public-part> <configured-class> '\n'
            <public-part> ::= OID
            <configured-class> ::= OID

        ここで、 CLASS-NAME は OZ++ 言語のクラス名として有効な文字列で、コ
        ンフィギュレーションを変更/追加しようとするクラスの名前を表します。
        OID は、 16 文字の 16 進数です。各語の間には、任意に空白または TAB 
        が挿入されていて構いません。ただし、改行は '\n' で指定された位置以
        外には挿入できません。空行および `#' で始まる行はコメントと解釈さ
        れます。

    -r executor-ID
        スタンドアローンでだけ有効なオプションです。スタンドアローンでは、
        そのエグゼキュータの動作に必要なすべてのクラスを持ったクラスオブジェ
        クトが、同じ OZROOT 上に存在する場合、そのエグゼキュータのクラスディ
        レクトリを直接参照することによって、クラスオブジェクトに対する問い
        合わせをすることなしに動作可能となります。 -r オプションは、このク
        ラスディレクトリを提供するエグゼキュータを指定します。

    -p  newimage が用いる中間的な生成物を、削除しないようにします。

これらのオプションが適切に設定されているならば、対応する設定手順は省略されま
す。

5. 標準の設定

以下では、 newimage で提供されている四種類の標準の設定について説明します。
README.site.JP も合わせて参照して下さい。

 5.1 サイトマスター

ネームディレクトリやカタログは、最初は各ドメインにひとつあれば十分です。サイ
トマスターは、これらを保持しているエグゼキュータで、そのドメインで中心的な役
割を果たします。そのドメインが動作するのにサイトマスター (または、同等の機能
を持つエグゼキュータ) は必須です。
　サイトマスターは、以下のオブジェクトを持っています。

    ・オブジェクトマネージャ
      :object-managers:site-master という名前がつきます。
      デーモンの数はデフォルトで設定されます。

    ・クラスオブジェクト
      :classes:site-master という名前がつきます。
      ブート用のクラスを管理し、プリロードされます。
      クラス配送モニタつきです。
      他のエグゼキュータ上のクラスオブジェクトを雇うことはしません。

    ・ネームディレクトリ
      プリロードはされませんが、オブジェクトマネージャは起動直後にネームディ
      レクトリを探してメソッド起動しますので、そのときにロードされます。

    ・カタログ
      :catalog という名前がつき、プリロードされます。

    ・ランチャ
      プリロードされます。

　加えて、以下の設定に関するオプションを指定することができます。オプションが
指定されていなければ、対話的に指定することができます。

    o コンフィギュレーションファイル (-a オプション)
    o ドメイン名 (-d オプション)
    o オーナ名 (-u オプション)

 5.2 ステーションマスター

NFS などで OZROOT を共有しているのでない限り、ステーションには、そのステーショ
ン上のエグゼキュータにクラスを供給するクラスオブジェクトが必要です。ステーショ
ンマスターは、ブートクラスを管理するクラスを保持しているエグゼキュータで、そ
のステーションと、 OZROOT を共有している他のステーション上のエグゼキュータに
クラスを供給できます。ステーションマスターは、それらのエグゼキュータが動作し
ている限りは停止させてはいけません。
　ステーションマスターは以下のオブジェクトを持っています。

    o オブジェクトマネージャ
      :object-managers:<EXID> という名前がつきます。
      <EXID> には、エグゼキュータ ID (16 桁の 16 進数) のうち、サイト内での
      エグゼキュータ番号にあたる部分 (5 桁めから 10 桁めまで) の 6 桁が入り
      ます。デーモンの数はデフォルトで設定されます。

    o クラスオブジェクト
      :classes:<EXID> という名前がつきます。ブート用のクラスを管理し、プリ
      ロードされます。クラス配送モニタつきです。他のエグゼキュータ上のクラ
      スオブジェクトを雇うことはしません。

    o ランチャ
      プリロードされます。

ネームディレクトリとカタログはありません。
　加えて、以下の設定に関するオプションを指定することができます。オプションが
指定されていなければ、対話的に指定することができます。

    o コンフィギュレーションファイル (-a オプション)
    o ドメイン名 (-d オプション)
    o オーナ名 (-u オプション)

 5.3 クラスオブジェクトつきスレーブ

適切なクラスオブジェクトからクラスの供給を受けられるエグゼキュータでは、それ
自身がクラスオブジェクトを保持している必要はないのですが、効率上の理由からク
ラスオブジェクトを置いておきたいことは多いでしょう。クラスオブジェクトつきス
レーブは、ブートクラスを管理しないクラスオブジェクトを保持しているエグゼキュー
タです。
  クラスオブジェクトつきスレーブは、その保持しているクラスオブジェクトがブー
トクラスを管理しないという点を除いて、ステーションマスターと同じです。

 5.4 クラスオブジェクトなしスレーブ

クラスオブジェクトを持たずに、他のエグゼキュータ上のクラスオブジェクトからク
ラスを供給してもらうエグゼキュータです。クラスオブジェクトを保持しない点を除
いて、クラスオブジェクトつきスレーブと同じですが、加えて、他のエグゼキュータ
上のクラスオブジェクトを雇うことができます。どのクラスオブジェクトを雇うかは、
対話的に設定できます。

 5.5 スタンドアローン

それ単独で動作させることの可能なエグゼキュータです。すなわち、サイトマスター
やステーションマスターが動作していることを必須の条件としません。ただし、アプ
リケーション自身が、ネームディレクトリやカタログに対する操作を要求している場
合は、それらが動作していなければなりません。クラスオブジェクトは、ある条件を
満たす場合に、不要となります。すなわち、実行時にはクラスファイルが必要ですの
で、同じ OZROOT 上に、実行時に必要となるすべてのクラスを保持しているクラスオ
ブジェクトが存在する場合にのみ、そのクラスディレクトリを直接参照するように設
定することで、新たにクラスオブジェクトを生成したり、他のクラスオブジェクトを
雇ったりしなくてよくなります。条件を満たすエグゼキュータが存在しない場合は、
クラスオブジェクトを生成するか雇うかして、不足のクラスの配送を受けられるよう
にしなければなりません。

    o オブジェクトマネージャ
      スタンドアローン用のオブジェクトマネージャが生成されます。
      :object-managers:<EXID> という名前がつきます。

その他のオブジェクトはありません。
　加えて、以下の設定に関するオプションを指定することができます。オプションが
指定されていなければ、対話的に指定することができます。

    o コンフィギュレーションファイル (-a オプション)
    o ドメイン名 (-d オプション)
    o オーナ名 (-u オプション)

　スタンドアローンエグゼキュータにはランチャがありませんが、代わりに、アプリ
ケーションのオブジェクトをひとつ生成して起動することができます。このオブジェ
クトは、グローバルオブジェクトとして生成されます。必ず Startable クラスのサブ
クラスであって、下記のパブリックメソッドを実装していなければなりません。

        void Initialize(): global

メソッド Initialize は、そのオブジェクトを生成するときに一度だけ呼ばれます。
通常のグローバルオブジェクト同様、 Initialize が呼ばれるときには Go は呼ばれ
ず、その後の起動時には Go が呼ばれて Initialize は呼ばれません。
　スタンドアローン用のオブジェクトマネージャを起動すると、ダイアログウィンド
ウが表示されます。このダイアログウィンドウを通して、アプリケーションオブジェ
クトの起動に関する設定が行われます。
　最初に、コンフィギュレーションファイルを質問してきます。

        Configuration File [none]:

newimage の際に指定したコンフィギュレーションファイルで十分であれば、単にリター
ンします。さもなければ追加のコンフィギュレーションファイル名を入力して下さい。
入力されたファイルが存在しない場合は、再度質問してきます。
　続いて、生成するアプリケーションオブジェクトのコンフィギュアドクラス ID が
質問されます。

        Configured Class ID:

16 文字の 16 進数を入力して下さい。それ以外のものを入力すると、再度質問してき
ます。正しく入力されると、そのクラスのオブジェクトが生成され、メソッド 
Initialize が呼び出されます。生成したオブジェクトが永続化した場合、次回以降の
起動では、コンフィギュアドクラス ID の問い合わせは行われず、そのオブジェクト
が起動されます。そのオブジェクトが削除されると、その次の起動の際には、再びコ
ンフィギュアドクラス ID が質問されます。
　これでアプリケーションオブジェクトが動作し始めますが、コンフィギュレーショ
ンファイルに不足があって、動作中に生じたインスタンス生成ができない場合は、ダ
イアログウィンドウに次のように表示されます。

        Configured Class ID for xxxxxxxxxxxxxxxx:

xxxxxxxxxxxxxxxx には、生成するクラスのパブリックバージョン ID が表示されてい
ますので、対応するコンフィギュアドクラス ID を入力して下さい。

6. oic のエラメッセージ

インストールや、他の何かの設定に異常があった場合、オブジェクトイメージコンパ
イラ oic がエラーメッセージを出力することがあります。こうなるとユーザにできる
ことはあまり多くないのですが、次の確認をするとよい場合もあります。

・sb は正しく動作していますか?

  コマンドラインから

        % sb Class 0

  と投入して、 16 ケタの 16 進数が表示されることを確認して下さい。
  これが正しく動作しない場合は、ブート処理系のスクールファイル 
  $OZROOT/etc/boot-school が正しくインストールされていない疑いがあります。
  インストールをやり直して、エラーメッセージを注意して見て下さい。

・Makefile.oibuild は正しくインストールされていますか?

  $OZROOT/lib/Makefile.oibuild が存在していて、サイズが 0 でないことを確認し
  て下さい。

7. newimage の中断

newimage は、 SIGHUP, SIGINT, SIGTERM で停止した場合、作業中のオブジェクトイ
メージファイルの入ったディレクトリ ($OZROOT/images/<executor-id>) を抹消しま
す。何らかの理由でこれを残したまま newimage を中断させたい場合は、 SIGQUIT
(端末から ^\) で停止させて下さい。
