/*
 * Copyright(c) 1994-1997 Information-technology Promotion Agency, Japan(IPA)
 *
 * All rights reserved.
 * This software and documentation is a result of the Open Fundamental
 * Software Technology Project of Information-technology Promotion Agency, 
 * Japan(IPA).
 * 
 * Permissions to use, copy, modify and distribute this software are governed 
 * by the terms and conditions set forth in the file COPYRIGHT, located in 
 * this release package.
 */


Outline of Functions in the Compiler Front End (CFE)

1. Programming in OZ++

   Here we explain the necessary concepts to perform programming in OZ++.

1.1 Class

   In OZ++, a class is given a distinguishable ID (version ID) unique to the entire system. Each class is managed by means of this ID.  In other words, each class is managed by its version.  This version classifies the function of a class into the following three parts.  Each part is given a different version ID.

1) There is an interface part (i.e. public part) for passing messages.  This part corresponds to the signature of a public member.  This part must be recompiled to make any alterations made on this part effective for classes using public members.

2) There is an interface part (i.e. protected part) to be used through inheritance.  This part corresponds to the signatures and the type of instance variables of protected methods.  Recompilation is necessary to make any alterations effective for subclasses of this class.

3) There is an implementation part for the interfaces of 1 and 2.  The definition of instance variables also corresponds to this part.  Any alterations made to this part can be made effective without recompilation (as mentioned later).

   Among these three parts, there is a descending relation in the order: public part, protected part, and implementation part.  Each part has an upper part, and several lower parts.  Any of the lower parts can be specified to its default version.  The default versions are used if the user does not specify version.  Moreover, the public part has a root part as its upper part.  This root part is representative of all versions for a given class.

1.2 The Language Processor

   A class is distinguished by its ID in the entire system of the OZ++.  However, while programming, it is necessary to denote class names in source codes.  Therefore, the compiler must convert class names into ID's.  For this purpose, we introduce a conversion table called the school.  The school is a list of pairs of class names and ID's, and while programming it provides a local space for labels of a class.

   In object oriented programming, using only the interface exposed by classes leads to programming which is independent of the implementation of classes.  By combining this characteristic with the framework of version management, it is possible to delay the implementation part's version of a class used in the program.  Thus, flexible operations like this becomes possible in OZ++.  In the language processor, an investigation into the use of the interface is carried out by accessing the interface information in the public or protected part.  To obtain the information used in this investigation, the compiler not only generates execution codes but also outputs information concerning the interface of both public and protected parts.  Therefore, compilation of a class in OZ++ involves processing the class in three parts: public, protected, and implementation.  The output of each part is registered in the class management system.  The investigation of interfaces is carried out by obtaining this information.

   The versions to be used are determined as follows:

- For the class using the public part, versions up to its public part are determined during compilation, and the version of its implementation part is determined during instance generation.

- For the inheriting class, versions up to its protected part are determined during compilation, and the version of its implementation part is determined during instance generation.

   The process that determines the implementation part's version during instance generation is called the configure.  The information resulting from this configure (i.e. configuration) is also class information, and is managed by the class management system.

1.3 Compilations

   Compilations are performed after activating the compiler front end and by specifying a school on the Work Bench.  In OZ++, compilations are performed in three parts. Each part has the following constraints:

1) Compilation of Each Part

- The upper part has to be compiled before the lower part.  For example, to compile the protected part, the public part must first be compiled.

- Depending on the school, compilation converts a class name into an 
ID.  Therefore, the class being used must exist in the specified school.

2) Compilation of Public Part

- The class of the protected part, which is inherited, must be 
compiled.

3) Compilation of Implementation Part

- The class of the public part, which is used, must compiled.

1.4 Upgrading Versions

   The version of a class is upgraded by specifying it during the compilation of the three parts.  If version upgrading is specified, the upgrading of parts lower than the one specified is demanded to the class management system.  For example, if version upgrading is specified during compilation of the public part, the class management system creates new versions for all three parts below the public part.  Furthermore, new version ID's are given to the three parts. 

2. List of Functions

-------------------------------------------------------------------------------------------
Menu	Menu Item	Function	Special Comments
-------------------------------------------------------------------------------------------
CFE	Add...	To add of source files
	Open...	To use a different school
	Close	To close
	Remove	To delete source files
	Preference...	Different setups	Effective after restart
	Quit	To terminate CFE
-------------------------------------------------------------------------------------------
Compile	One...	To compile one file
	All 	To compile multiple files
-------------------------------------------------------------------------------------------
Configure	One...	To configure one file
	All...	To configure multiple files
-------------------------------------------------------------------------------------------
Generic	One...	To generate a real generic to 
		one class.  Also possible to 
		regenerate real generics (present 
		only in the School) which have
		been generated from the specified 
		formal generic class.
	All	Generates the real generics needed 
		during the of Compiles's All...
-------------------------------------------------------------------------------------------
Window		To switch windows
-------------------------------------------------------------------------------------------


2.1 List of Functions in Dialogs 

-------------------------------------------------------------------------------------------
Menu	Command	Item, Button	Function
-------------------------------------------------------------------------------------------
CFE	Preference..	Class Object Name
		Current Directory	File Selector can be activated
			by double clicking.
		Language	English/Japanese
-------------------------------------------------------------------------------------------
Compile	One...	New	Gives an ID
			(Effective for those not 
			belonging to a School)
		Public
		Protected	Can not be used in record, 
			static class, or shared.
		Public & Protected 
		Implementation	Can not be used in record, 
			static class, or shared.
		All...	
		New Version	To create a new version
		Go	Executes
		Cancel	Cancels
	All...	New
		Public & Protected 
		Implementation
		Again (UNIX, without 
		version)
		New Version (with 
		version)
		Retry	Executes after initializing 
			the log
		Go	Executes
		Cancel 	Cancels
-------------------------------------------------------------------------------------------
Configure	One	Go	Executes
		Cancel	Cancels
		Other...	Selects other implementation 
			part (c.f. functions of SB in
			README.WB)
	All...	Retry 	Executes after initializing 
			the log
		Cancel	Cancels
-------------------------------------------------------------------------------------------
Generic	One	Class Name	Inputs the class name of 
			either real generic or formal 
			generic class
	Again		Specifies this to regenerate 
			real generic classes
		Go	Executes
		Cancel 	Cancels
	All 	Go	Executes
		Cancel 	Cancels
-------------------------------------------------------------------------------------------


2.2 How to Use the File Selector

   Double clicking on the 'directory' moves directories.
   Double clicking on the 'file' selects of files.

- To select a directory...
Activate the Select button in select
Double click while holding down the control key


2.3 Cautions

   Activate "One ..." of Compile or Configure after selecting a file.

3. Upgrading Versions

   In the processors of this version and those yet to be released, the version of classes can be upgraded.  However, precompiled classes can not be overwritten.  Therefore, if a part which has already been generated is recompiled, an error message is displayed.  In such cases, upgrading of the version is performed as follows:

   After selecting the checkbox 'New Version', compile the part to be generated.

   However, when compiling an entirely new class, instead of New Version, simply select New.

   Furthermore, if the version is upgraded in the compilation of Public and Protected, new ID's must be given not only to the part to be compiled but also to the parts below.  For example, if this is performed, give new ID's for all three parts Public, Protected, and Implementation.  This eventually causes the contents of the school to change.

4. Configuration

   You must `configure' your class after compiling it to use it.

   Configuring a class is an operation to specify which version of the
implementaion part of the class and all classes inherited by the class are to
be used.  Using OZ++ Workbench allows you to use the versions inluded in your
school without any special specifications when configuring your class.  After
successful compilation of the implementaion part of a class, a window for
configuring the class is automatically displayed.  By clicking `OK' button, you
can configure the class using the new implemetation part.  You can also
configure your classes by selecting `One...' and `All...' button on `Configure'
menu on the CFE window.  `One...' button allows you to select implemetaion
parts to be used in configuration by displaing a window listing class names.
Clicking `Other...'  button near the class you want to specify implementation
part to be used displayes a selection window which is listing available
implementaion parts.

   Since classes are referred by its public part ID in the OZ++ executable
code, a configured class ID of the class is required when generating an
instance of the class.  Searching the configured class ID starts from looking
up the configuration cache table on the object manager of the executor.  When
there is no entry of the public part ID, a configured class ID registered at
class management system as the default is used.  Lacking the default raises an
exception at runtime.  You can change the configuration cache table and the
default ID in the class management system by opertions on OZ++ Workbench.
Double clicks on each class on the SB window opens an window listing related
class IDs of the class.  Clicking the `Other...' button near the
`Configuration' field on the window opens a selection window listing available
configured classes.  By `Select'ing one of the configured classes, you can set
the configured class ID to the configuration cache table on the object manager
of the executor on which the workbench is running.  Furthermore, by marking one
of the configured class as `Default', you can set the configured class ID in
class management system as the default configured class.  The default
configured class in the class management system is effective hereafter
anywhere, while an entry on configuration cache table is effective in the
executor as long as the configuration cache is effective.  When running your
class, the cache entry and the default configured class should be specified
appropriately.
